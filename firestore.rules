/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and leaderboard entries,
 *              while allowing public read access to leaderboard data. Duel games can be created by authenticated users.
 *
 * @dataStructure
 *  /users/{userId} - User profile information, writable only by the user.
 *  /leaderboard/{userId} - Leaderboard entries, publicly readable, writable only by the user.
 *  /duels/{duelId} - Duel game sessions, can be created by any authenticated user.
 *
 * @keySecurityDecisions
 *  - User profiles are private and only writable by the owning user.
 *  - Leaderboard data is publicly readable to encourage competition.
 *  - Duel games can be created by any authenticated user.
 *
 * @denormalizationForAuthorization
 *  - For `duels/{duelId}`, the `hostId` field on the document is used to enforce ownership for updates and deletes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update) - User `XrpFF8e1mQQK27g4Lt4Q2SalA8g2` can read/write their profile at `/users/XrpFF8e1mQQK27g4Lt4Q2SalA8g2`.
     * @deny (get, create, update) - User `OtherUser` cannot read/write profile at `/users/XrpFF8e1mQQK27g4Lt4Q2SalA8g2`.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read leaderboard data, but only the user to update their own entry.
     * @path /leaderboard/{userId}
     * @allow (get, list) - Any user can read leaderboard entries.
     * @allow (create, update) - User `XrpFF8e1mQQK27g4Lt4Q2SalA8g2` can create/update their entry at `/leaderboard/XrpFF8e1mQQK27g4Lt4Q2SalA8g2`.
     * @deny (create, update) - User `OtherUser` cannot create/update entry at `/leaderboard/XrpFF8e1mQQK27g4Lt4Q2SalA8g2`.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /leaderboard/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Allows authenticated users to create duel games, and the host to update and delete them.
     * @path /duels/{duelId}
     * @allow (create) - Authenticated user can create a duel.
     * @allow (update, delete) - Host user can update/delete their duel.
     * @deny (update, delete) - Non-host user cannot update/delete the duel.
     * @principle Allows game creation for authenticated users, and enforces host ownership for modification.
     */
    match /duels/{duelId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.hostId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.hostId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.hostId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}