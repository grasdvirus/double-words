/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and leaderboard entries,
 * and a host-ownership model for duel games.  It also ensures that only the host of a duel can modify it.
 * Public read access is granted to leaderboard entries and duel information.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, writeable only by the user.
 * - /leaderboard/{userId}: Leaderboard entries, writeable only by the user.
 * - /duels/{duelId}: Duel game sessions, writeable only by the host and publicly readable.
 * - /duelGameCodes/{gameCode}:  Maps game codes to duel IDs. Anyone should be able to create this, but only the host should be able to update or delete.
 *
 * Key Security Decisions:
 * - User listing is disabled for both /users and /leaderboard.
 * - Schema validation is relaxed to allow for rapid prototyping, focusing on authorization.
 * - Only the host of a duel can modify it after it's created.
 * - Anyone should be able to read the leaderboard.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data. Only the user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete) User with UID 'userId' can modify their own profile.
     * @deny (create, update, delete) User with UID 'anotherUserId' cannot modify user 'userId's profile.
     * @allow (get, list) User with UID 'userId' can read their profile.
     * @deny list: Listing all users is not permitted.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures leaderboard entries. Only the user can write their own entry. Publicly readable.
     * @path /leaderboard/{userId}
     * @allow (create, update, delete) User with UID 'userId' can modify their own leaderboard entry.
     * @deny (create, update, delete) User with UID 'anotherUserId' cannot modify user 'userId's leaderboard entry.
     * @allow get Leaderboard entries are publicly readable.
     * @allow list Leaderboard entries are publicly readable.
     * @deny list: Listing all entries is not permitted without authentication.
     * @principle Enforces document ownership for writes, but allows public reads.
     */
    match /leaderboard/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isOwner(userId) && request.resource.data.displayName != null && request.resource.data.score != null;
      allow update: if isExistingOwner(userId) && request.resource.data.displayName == resource.data.displayName && request.resource.data.score != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures duel game sessions. Publicly readable, but only the host can modify the game.
     * @path /duels/{duelId}
     * @allow (create) The host can create a new duel. The hostId in the request must match the authenticated user's UID.
     * @allow (update, delete) Only the host of an existing duel can update or delete it.
     * @allow get Duel information is publicly readable.
     * @allow list Duel information is publicly readable.
     * @principle Enforces host-ownership for writes, but allows public reads.
     */
    match /duels/{duelId} {
      function isHost(hostId) {
        return request.auth.uid == hostId;
      }

      function isExistingHost(hostId) {
        return isHost(hostId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isHost(request.resource.data.hostId) && request.resource.data.hostId == request.auth.uid;
      allow update: if isExistingHost(resource.data.hostId);
      allow delete: if isExistingHost(resource.data.hostId);
    }

        /**
     * @description Secures duel game codes.  Anyone can create a game code mapping, but only the host can update or delete.
     * @path /duelGameCodes/{gameCode}
     */
    match /duelGameCodes/{gameCode} {
          function isHostOfDuel(duelId) {
          return get(/databases/$(database)/documents/duels/$(duelId)).data.hostId == request.auth.uid;
        }
          function isExistingHostOfDuel(duelId) {
              return isHostOfDuel(duelId) && resource != null;
          }

      allow get: if true;
      allow list: if false;
      allow create: if true;
          // CRITICAL: Update and delete must verify that the user is the host of the duel.
      allow update: if isExistingHostOfDuel(resource.data.duelId);
      allow delete: if isExistingHostOfDuel(resource.data.duelId);
    }
  }
}