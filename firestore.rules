/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for profile data and leaderboard entries,
 * and a collaborative ownership model for duel games. Public read access is granted
 * to the leaderboard and duel game codes, but write access is strictly controlled.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, writable only by the user.
 * - /leaderboard/{userId}: Leaderboard entries, writable only by the user. Publicly readable.
 * - /duels/{duelId}: Duel game sessions, with collaborative ownership.
 * - /duelGameCodes/{gameCode}: Maps short codes to duel IDs, publicly readable.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Leaderboard data is publicly readable to foster competition.
 * - Duel game access is managed through a collaborative ownership model.
 *
 * Denormalization for Authorization:
 * - Duel documents MUST contain a `hostId` field representing the creator. This is used for ownership checks on updates and deletes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, allowing only the user to manage their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a profile at /users/user123.
     * @allow (update) - User with UID 'user123' can update their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (update) - User with UID 'user456' cannot update the profile at /users/user123.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to the leaderboard, allowing anyone to read, but only the user to update their own entry.
     * @path /leaderboard/{userId}
     * @allow (get) - Anyone can read a leaderboard entry.
     * @allow (list) - Anyone can list leaderboard entries.
     * @allow (create) - User with UID 'user123' can create an entry at /leaderboard/user123.
     * @allow (update) - User with UID 'user123' can update their entry at /leaderboard/user123.
     * @deny (create) - User with UID 'user456' cannot create an entry at /leaderboard/user123.
     * @deny (update) - User with UID 'user456' cannot update the entry at /leaderboard/user123.
     * @principle Enforces document ownership for writes but allows public reads for the leaderboard.
     */
    match /leaderboard/{userId} {
      allow get, list: if true;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages access to duel game sessions.
     * @path /duels/{duelId}
     * @allow (get) - Anyone can read a duel.
     * @allow (create) - Anyone can create a duel
     * @allow (update) - Only the host can update a duel.
     * @allow (delete) - Only the host can delete a duel.
     * @deny (create) - A non-authenticated user cannot create a duel.
     * @deny (update) - A non-host user cannot update a duel.
     * @principle Enforces host ownership for duel modifications.
     */
    match /duels/{duelId} {
      allow get, list: if true;

      allow create: if isSignedIn();
      allow update: if isSignedIn() && isDuelHost();
      allow delete: if isSignedIn() && isDuelHost();
    }

    /**
     * @description Manages the mapping of game codes to duel IDs. Publicly readable, but creation is open for prototyping.
     * @path /duelGameCodes/{gameCode}
     * @allow (get) - Anyone can read a game code mapping.
     * @allow (list) - Anyone can list game code mappings.
     * @allow (create) - Anyone can create a game code mapping.
     * @deny (update) - No one can update a game code mapping.
     * @deny (delete) - No one can delete a game code mapping.
     * @principle Allows public reads for code lookup.
     */
    match /duelGameCodes/{gameCode} {
      allow get, list: if true;

      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isDuelHost() {
        return resource.data.hostId == request.auth.uid;
    }
  }
}