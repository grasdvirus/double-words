/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and leaderboard entries.
 * Duel games have specific rules for creation, joining, and updating based on game status and player participation.
 *
 * Data Structure:
 * - /users/{userId}: Public user profile information, writable only by the user.
 * - /leaderboard/{userId}: Leaderboard entries, publicly readable, writable only by the user.
 * - /duels/{duelId}: Duel game sessions with detailed rules for creation, joining, and updating.
 * - /duelGameCodes/{gameCode}: Maps game codes to duel IDs.
 *
 * Key Security Decisions:
 * - Users can only create their own profile and leaderboard entries.
 * - Leaderboard data is publicly readable to allow for displaying the rankings.
 * - Duel game creation is restricted to authenticated users.
 * - Duel game updates are restricted based on game status and player participation.
 * - Listing of users or leaderboard documents is disallowed for privacy and performance reasons.
 *
 * Denormalization for Authorization:
 * - The `DuelGame` entity contains a `hostId` field to simplify ownership checks for game management.
 * - The `DuelGame` entity contains a `players` array to simplify authorization for game participation and updates.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Users can only read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create a profile with document ID 'user_abc'.
     * @allow (update) - User with UID 'user_abc' can update their own profile 'user_abc'.
     * @deny  (create) - User with UID 'user_def' cannot create a profile with document ID 'user_abc'.
     * @deny  (delete) - Only the user can delete their profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure leaderboard entries. Publicly readable, but only the user can update their own entry.
     * @path /leaderboard/{userId}
     * @allow (get)   - Any user can read a leaderboard entry.
     * @allow (create) - User with UID 'user_abc' can create a leaderboard entry with document ID 'user_abc'.
     * @allow (update) - User with UID 'user_abc' can update their own leaderboard entry 'user_abc'.
     * @deny  (create) - User with UID 'user_def' cannot create a leaderboard entry with document ID 'user_abc'.
     * @deny  (delete) - Only the user can delete their leaderboard entry.
     * @principle Enforces document ownership for leaderboard entries, allows public reads.
     */
    match /leaderboard/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure duel game sessions.
     * @path /duels/{duelId}
     * @allow (create) - Any authenticated user can create a new duel.
     * @allow (update) - Only participants can update a duel.
     * @deny  (delete) - No one can delete a duel directly (status updates only).
     * @principle Enforces participation-based access control for duel games.
     */
    match /duels/{duelId} {
      function isHost(duelId) {
        return request.auth.uid == resource.data.hostId;
      }

      function isParticipant(duelId) {
        return request.auth.uid in resource.data.playerScores;
      }

      function isExistingParticipant(duelId) {
          return resource.data.keys().hasAll(['playerScores']) && resource.data.playerScores is map && request.auth.uid in resource.data.playerScores;
      }

      function isWaiting() {
        return resource.data.status == "waiting";
      }

      function isActive() {
        return resource.data.status == "active";
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isExistingParticipant(duelId);
      allow delete: if false;
    }

     /**
      * @description Secure duel game code mappings.
      * @path /duelGameCodes/{gameCode}
      * @allow (get)   - Anyone can lookup a duel ID by game code.
      * @allow (create) - Only the server can create these mappings via the Firebase Admin SDK
      * @deny (update) - Game codes should not be updated.
      * @deny (delete) - Game codes should not be deleted.
      * @principle Restricts write access to the server.
      */
    match /duelGameCodes/{gameCode} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}