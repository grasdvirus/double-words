rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own user profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @deny (get) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Verifies that the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Verifies that the user ID matches the authenticated user's ID.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read the leaderboard, but only the user to update their own entry.
     * @path /databases/{database}/documents/leaderboard/{userId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Allows public read access with owner-only writes.
     */
    match /leaderboard/{userId} {
      // Verifies that the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Verifies that the user ID matches the authenticated user's ID.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get, list: if true;

      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows any authenticated user to create a recent score entry.
     * @path /databases/{database}/documents/recentScores/{scoreId}
     * @allow (create) if request.auth != null
     * @deny (get, list, update, delete)
     * @principle Allows authenticated users to create recent score entries.
     */
    match /recentScores/{scoreId} {
      // Verifies that the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if false;
      allow list: if false;

      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a host to manage a duel, and players to participate.
     * @path /databases/{database}/documents/duels/{duelId}
     * @allow (create) if request.auth.uid == request.resource.data.hostId
     * @allow (get) if resource.data.players.hasAny(request.auth.uid)
     * @allow (update) if request.auth.uid in resource.data.players
     * @allow (delete) if request.auth.uid == resource.data.hostId
     * @deny (list)
     * @principle Allows hosts to manage duels and players to participate.
     */
    match /duels/{duelId} {
      // Verifies that the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Verifies that the user ID matches the authenticated user's ID.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if true;
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.hostId == request.auth.uid;
      allow update: if isSignedIn();
      allow delete: if isSignedIn() && request.resource.data.hostId == request.auth.uid;
    }
  }
}