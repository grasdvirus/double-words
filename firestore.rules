/**
 * @file Firebase Security Rules for Firestore.
 *
 * @core_philosophy This ruleset enforces a user-ownership model for user profiles and leaderboard entries,
 *                  and a shared-access model for duel games where players can join and update game sessions.
 *                  The rules prioritize secure access control and data integrity.
 *
 * @data_structure - `/users/{userId}`: Stores public user profile information.
 *                  - `/leaderboard/{userId}`: Stores leaderboard entries, publicly readable but writable only by the user.
 *                  - `/duels/{duelId}`: Stores duel game sessions, with access controlled by game membership.
 *
 * @key_security_decisions - Users can only read and write their own profile and leaderboard data.
 *                          - Duel game data is accessible to players participating in the game.
 *                          - Listing of users is disallowed to protect user privacy.
 *                          - Listing of leaderboard entries is allowed for public display of the leaderboard.
 *                          - Ownership is validated on create and update operations to maintain data consistency.
 *
 * @denormalization_for_authorization The `duels/{duelId}` document needs to contain a `players` field.
 *
 * @structural_segregation  There is no private/public content in the data model, so structural segregation is not applied.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user with matching userId can create their profile.
     * @allow (get, update, delete) Signed-in user with matching userId can read, update, or delete their profile.
     * @deny (create) Signed-in user cannot create a profile with a mismatched userId.
     * @deny (get, update, delete) Signed-in user cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to leaderboard entries.
     * @path /leaderboard/{userId}
     * @allow (create) Signed-in user with matching userId can create their leaderboard entry.
     * @allow (get, list, update, delete) Signed-in user with matching userId can read, update, or delete their own entry.
     * @deny (create) Signed-in user cannot create a leaderboard entry with a mismatched userId.
     * @deny (get, list, update, or delete) Signed-in user cannot read, update, or delete another user's leaderboard entry.
     * @principle Enforces document ownership for leaderboard entries, with public read access.
     */
    match /leaderboard/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId);
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to duel game sessions.
     * @path /duels/{duelId}
     * @allow (create) Signed-in users can create new duel games.
     * @allow (get, list, update, delete) Only players in the game can read, update, or delete the game.
     * @deny (create) Non-signed-in users cannot create games.
     * @deny (get, list, update, delete) Users not in the game cannot access it.
     * @principle Enforces shared access based on game membership.
     */
    match /duels/{duelId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isPlayer() {
            return request.auth.uid in resource.data.players;
        }
        
        function isExistingPlayer() {
            return isSignedIn() && isPlayer();
        }

        function playerInfo() {
          return {
            "uid": request.auth.uid,
            "displayName": request.auth.token.name,
            "photoURL": request.auth.token.picture
          };
        }

        allow get: if isExistingPlayer();
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isExistingPlayer();
        allow delete: if isExistingPlayer();
    }
  }
}