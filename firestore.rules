/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and leaderboard entries.
 * Duel game documents are publicly listable, but require user ownership for modification.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, writeable only by the user.
 * - /leaderboard/{userId}: Leaderboard entries, writeable only by the user.
 * - /duels/{duelId}: Duel game sessions. Publicly readable.  Only the host can modify.
 *
 * Key Security Decisions:
 * - User profiles and leaderboard entries are strictly owned by the user.
 * - Listing all users or leaderboard entries is not allowed.
 * - Duel games are publicly listable to allow users to discover available games.
 *
 * Denormalization for Authorization:
 * - Duel documents contain a `hostId` field to easily determine the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create, update, get, delete) User with UID 'userId' can create, update, get, or delete their own profile.
     * @deny (create, update, get, delete) User with UID 'otherUserId' cannot create, update, get, or delete the profile of 'userId'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure leaderboard entries. Only the authenticated user can read and write their own leaderboard entry.
     * @path /leaderboard/{userId}
     * @allow (create, update, get, delete) User with UID 'userId' can create, update, get, or delete their own leaderboard entry.
     * @deny (create, update, get, delete) User with UID 'otherUserId' cannot create, update, get, or delete the leaderboard entry of 'userId'.
     * @principle Enforces document ownership for all operations.
     */
    match /leaderboard/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if true;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.displayName == request.auth.token.name;
      allow update: if isExistingOwner(userId) && isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

        /**
         * @description Secure duel game sessions.  Anyone can read the list of games, but only the host can modify.
         * @path /duels/{duelId}
         * @allow (get, list) Any user can read the list of duel games.
         * @allow (create) Only an authenticated user can create a new duel game, and they become the host.
         * @allow (update, delete) Only the host of the game can update or delete it.
         * @deny (update, delete) A non-host user cannot modify a duel game.
         * @principle Public read access for discovery, owner-only writes.
         */
        match /duels/{duelId} {
            function isSignedIn() {
                return request.auth != null;
            }

            function isOwner(hostId) {
                return isSignedIn() && request.auth.uid == hostId;
            }

            function isExistingOwner(hostId) {
                return isOwner(hostId) && resource != null;
            }

            allow get: if true;
            allow list: if true;
            allow create: if isSignedIn() && request.resource.data.hostId == request.auth.uid;
            allow update: if isExistingOwner(resource.data.hostId);
            allow delete: if isExistingOwner(resource.data.hostId);
        }
  }
}