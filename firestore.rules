/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control where appropriate,
 * while relaxing data validation to allow for rapid prototyping and schema evolution. This means that while data
 * types and specific field requirements are not validated, authorization is always checked.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, only writable by the user themselves.
 * - /leaderboard/{userId}: Leaderboard entries, only writable by the user themselves, publicly readable.
 * - /recentScores/{userId}: Recent scores for each user, only writable by the user themselves, publicly readable.
 * - /duels/{duelId}: Duel game sessions. Open for listing, but only the host can modify and manage them.
 *
 * Key Security Decisions:
 * - Listing of user documents is disallowed.
 * - Public read access is granted to the /leaderboard and /recentScores collections.
 * - The 'duels' collection allows listing but restricts modifications to the host.
 *
 * Denormalization for Authorization:
 * No denormalization is explicitly required in this configuration because the ownership and relationships
 * are directly represented in the document paths or within the documents themselves (e.g., `hostId` in `duels`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete) User 'john.doe' with UID '123' can create/update/delete /users/123.
     * @deny (create, update, delete) User 'jane.doe' with UID '456' cannot create/update/delete /users/123.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Leaderboard entries are publicly readable but only the user can update their own entry.
     * @path /leaderboard/{userId}
     * @allow (get, list) Any user can read any leaderboard entry.
     * @allow (create, update, delete) User 'john.doe' with UID '123' can create/update/delete /leaderboard/123.
     * @deny (create, update, delete) User 'jane.doe' with UID '456' cannot create/update/delete /leaderboard/123.
     * @principle Public read, owner-only writes.
     */
    match /leaderboard/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Recent score entries are publicly readable but only the user can update their own entry.
     * @path /recentScores/{userId}
     * @allow (get, list) Any user can read any recent score entry.
     * @allow (create, update, delete) User 'john.doe' with UID '123' can create/update/delete /recentScores/123.
     * @deny (create, update, delete) User 'jane.doe' with UID '456' cannot create/update/delete /recentScores/123.
     * @principle Public read, owner-only writes.
     */
    match /recentScores/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Duel game sessions. Anyone can list duels, but only the host can modify/delete.
     * @path /duels/{duelId}
     * @allow (list) Any user can list available duels.
     * @allow (create) Any authenticated user can create a duel.
     * @allow (update, delete) Only the host (creator) of the duel can update/delete it.
     * @deny (update, delete) A non-host user cannot update or delete a duel.
     * @principle Public listing, owner-only writes.
     */
    match /duels/{duelId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isHost(hostId) {
            return request.auth != null && request.auth.uid == hostId;
        }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isHost(resource.data.hostId);
      allow delete: if isHost(resource.data.hostId);
    }
  }
}