/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-centric security model, allowing users to read public data and control their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. Each user can only manage their own profile.
 * - /leaderboard/{userId}: Stores leaderboard entries. Publicly readable, but users can only update their own entry.
 * - /recentScores/{userId}: Stores recent score entries. Publicly readable, and users can only update their own entry.
 * - /duels/{duelId}: Stores duel game sessions. Openly readable, and users can manage their own games.
 *
 * Key Security Decisions:
 * - Users can only read the data in `/users`, `/leaderboard`, and `/recentScores` collections if signed in.
 * - Users can only modify their own user profiles and related data.
 * - Listing of all users is disallowed.
 * - Denormalization for Authorization: To simplify rules and improve performance, the rules rely on user IDs embedded within documents to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read their own profile and update it.
     * @path /users/{userId}
     * @allow (get, update, delete) User with UID 'user123' can read, update, or delete document 'user123'.
     * @allow (create) User with UID 'user123' can create document 'user123'.
     * @deny (get, update, delete) User with UID 'user456' cannot read, update, or delete document 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read the leaderboard but only the user to update their own entry.
     * @path /leaderboard/{userId}
     * @allow (get, list) Any signed-in user can read any leaderboard entry.
     * @allow (create, update, delete) User with UID 'user123' can create or update document 'user123'.
     * @deny (create, update, delete) User with UID 'user456' cannot create or update document 'user123'.
     * @principle Restricts write access to owner.
     */
    match /leaderboard/{userId} {
      allow get, list: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read recent scores but only the user to update their own entry.
     * @path /recentScores/{userId}
     * @allow (get, list) Any signed-in user can read any recent score entry.
     * @allow (create, update, delete) User with UID 'user123' can create or update document 'user123'.
     * @deny (create, update, delete) User with UID 'user456' cannot create or update document 'user123'.
     * @principle Restricts write access to owner.
     */
    match /recentScores/{userId} {
      allow get, list: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read duels, but only host can update.
     * @path /duels/{duelId}
     * @allow (get, list) Any signed-in user can read any duel.
     * @allow (create) User with UID 'user123' can create a duel.
     * @allow (update, delete) User with UID 'user123' can update or delete a duel they host.
     * @deny (create) User without authentication cannot create a duel.
     * @deny (update, delete) User with UID 'user456' cannot update or delete a duel hosted by 'user123'.
     * @principle Enforces host ownership for writes.
     */
    match /duels/{duelId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.hostId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.hostId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.hostId == request.auth.uid && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return request.auth.uid == userId && resource != null;
    }
  }
}