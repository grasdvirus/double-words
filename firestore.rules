/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization while relaxing data validation.
 * It enforces a user-ownership model, ensuring users can only modify their own data, but it does not
 * validate the specific data shapes beyond what's necessary for authorization.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information. Each user can only write to their own document.
 * - /leaderboard/{userId}: Stores the highest score for each user. Publicly readable, but a user can only write to their own entry.
 *
 * Key Security Decisions:
 * - Users can only read the leaderboard.
 * - Users can only modify their own documents in both /users and /leaderboard.
 * - No listing of users is allowed to protect user privacy.
 *
 * Denormalization for Authorization:
 *  -  The rules enforce ownership by comparing `request.auth.uid` to the `userId` in the document path.  No denormalization is required as the path itself provides the necessary information.
 *
 * Structural Segregation:
 *  - No distinction between private and public collections is needed in this data model as the current rules cover the requirements
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile document at /users/user_abc.
     * @deny (create) User with UID 'user_def' cannot create a profile document at /users/user_abc.
     * @allow (get) Any user can read any user profile
     * @deny (list) No one can list all users.
     * @allow (update) User with UID 'user_abc' can update their own profile document at /users/user_abc.
     * @deny (update) User with UID 'user_def' cannot update the profile document at /users/user_abc.
     * @allow (delete) User with UID 'user_abc' can delete their own profile document at /users/user_abc.
     * @deny (delete) User with UID 'user_def' cannot delete the profile document at /users/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to leaderboard entries.
     * @path /leaderboard/{userId}
     * @allow (create) User with UID 'user_abc' can create their own leaderboard entry at /leaderboard/user_abc.
     * @deny (create) User with UID 'user_def' cannot create a leaderboard entry at /leaderboard/user_abc.
     * @allow (get) Any user can read any leaderboard entry.
     * @allow (list) Any user can list leaderboard entries.
     * @allow (update) User with UID 'user_abc' can update their own leaderboard entry at /leaderboard/user_abc.
     * @deny (update) User with UID 'user_def' cannot update the leaderboard entry at /leaderboard/user_abc.
     * @allow (delete) User with UID 'user_abc' can delete their own leaderboard entry at /leaderboard/user_abc.
     * @deny (delete) User with UID 'user_def' cannot delete the leaderboard entry at /leaderboard/user_abc.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /leaderboard/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}