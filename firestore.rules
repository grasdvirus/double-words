/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure authorization while allowing flexible data shapes during prototyping.
 * It enforces strict user-ownership and role-based access where applicable, but avoids excessive schema validation.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles. Only the user can modify their own profile.
 * - /leaderboard/{userId}: Stores leaderboard entries. Publicly readable, but only a user can modify their entry.
 * - /duels/{duelId}: Stores duel game sessions.  Allows players to create, join, and update games.
 *
 * Key Security Decisions:
 * - Users can only modify their own profiles and leaderboard entries.
 * - Public read access is granted for leaderboard data.
 * - Rules are designed to prevent unauthorized data modification and deletion.
 * - Schema validation is minimized to facilitate rapid prototyping and iteration.
 *
 * Denormalization for Authorization:
 *   - The `DuelGame` entity should contain all information required to determine if a user can join or update the game, such as a `hostId` field and a list of `playerIds`.
 *
 * Structural Segregation:
 *   - Public user profiles are stored in `/users/{userId}`, separate from any private user data (not defined here).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID "test_user" can create their own profile document.
     * @allow (update) User with UID "test_user" can update their own profile document.
     * @deny (create) User with UID "other_user" cannot create a document with ID "test_user".
     * @deny (update) User with UID "other_user" cannot update document "test_user".
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Controls access to leaderboard entries.
     * @path /leaderboard/{userId}
     * @allow (get) Anyone can read leaderboard entries.
     * @allow (list) Anyone can list leaderboard entries.
     * @allow (create) User with UID "test_user" can create their own leaderboard entry.
     * @allow (update) User with UID "test_user" can update their own leaderboard entry.
     * @deny (create) User with UID "other_user" cannot create a document with ID "test_user".
     * @deny (update) User with UID "other_user" cannot update document "test_user".
     * @principle Enforces document ownership for writes, public read access.
     */
    match /leaderboard/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Controls access to duel game sessions.
     * @path /duels/{duelId}
     * @allow (create) Authenticated user can create a new duel.
     * @allow (get) Anyone can read duel information.
     * @allow (update) Players can update the duel status.
     * @deny (delete) No one can delete a duel.
     * @principle Allows creating, joining, and updating duels.
     */
    match /duels/{duelId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && canUpdateDuel(duelId);
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

        function canUpdateDuel(duelId) {
            return exists(/databases/$(database)/documents/duels/$(duelId))
            && (resource.data.hostId == request.auth.uid || request.resource.data.players[request.auth.uid] != null);
        }
  }
}