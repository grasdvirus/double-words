/**
 * @fileoverview Firestore Security Rules for Duel app.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and leaderboard entries,
 * and allows open read access to leaderboard data. Duel games can be created by any logged-in user.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, writeable only by the user.
 * - /leaderboard/{userId}: Leaderboard entries, publicly readable, writeable only by the user.
 * - /duels/{duelId}: Duel game sessions.
 *
 * Key Security Decisions:
 * - Users can only read their own profile.
 * - Users can only read and write their own leaderboard entry.
 * - Listing of users is disallowed for privacy.
 * - Listing of leaderboard is allowed since its designed to be a public resource.
 * - Listing of duels is allowed for any logged in user.
 *
 * Denormalization for Authorization:
 * - The `hostId` field in the `/duels/{duelId}` document is used to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile.
     * @allow (get) - User with UID 'user123' can read their profile.
     * @allow (update) - User with UID 'user123' can update their profile.
     * @allow (delete) - User with UID 'user123' can delete their profile.
     * @deny (create) - User with UID 'otherUser' cannot create a profile for 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to leaderboard entries.
     * @path /leaderboard/{userId}
     * @allow (get) - Anyone can read any leaderboard entry.
     * @allow (list) - Anyone can list all leaderboard entries.
     * @allow (create) - User with UID 'user123' can create their leaderboard entry.
     * @allow (update) - User with UID 'user123' can update their leaderboard entry.
     * @allow (delete) - User with UID 'user123' can delete their leaderboard entry.
     * @deny (create) - User with UID 'otherUser' cannot create a leaderboard entry for 'user123'.
     * @principle Allows public read access to leaderboard data, enforces ownership for writes.
     */
    match /leaderboard/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to duel game sessions.
     * @path /duels/{duelId}
     * @allow (create) - User with UID 'user123' can create a duel. The hostId must match.
     * @allow (get) - Anyone can read a duel.
     * @allow (list) - Any logged-in user can list duels.
     * @allow (update) - Only the host (identified by hostId) can update the duel.
     * @allow (delete) - Only the host can delete the duel.
     * @deny (create) - User with UID 'otherUser' cannot create a duel with hostId 'user123'.
     * @principle Enforces ownership for duel creation and modification.
     */
    match /duels/{duelId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.hostId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.hostId == resource.data.hostId;
      allow delete: if isSignedIn() && request.resource.data.hostId == resource.data.hostId;
    }
  }
}