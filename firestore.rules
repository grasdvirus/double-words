/**
 * @fileoverview Firestore Security Rules for the Duel app.
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model. Users can read public
 * information, but are generally restricted to creating, updating, and deleting
 * their own data.  Data structures are designed to make common security checks
 * efficient.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, editable only by the user.
 * - /leaderboard/{userId}: Leaderboard entries, publicly readable, writable only by the user.
 * - /duels/{duelId}: Duel game sessions, where players can join and update games.
 *
 * Key Security Decisions:
 * - Users can only create their own profile and leaderboard entries.
 * - Listing of users is disallowed.
 * - Duels can be joined by any authenticated user. Only authenticated users can start and modify duels.
 *
 * Denormalization for Authorization:
 * - The `hostId` field is denormalized into the `/duels/{duelId}` document
 *   to allow for efficient ownership checks on game creation and updates.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Users can only read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User 'bob' (auth.uid: 'bob') can create /users/bob.
     * @allow (get) - User 'bob' (auth.uid: 'bob') can get /users/bob.
     * @allow (update) - User 'bob' (auth.uid: 'bob') can update /users/bob.
     * @allow (delete) - User 'bob' (auth.uid: 'bob') can delete /users/bob.
     * @deny (create) - User 'bob' (auth.uid: 'bob') cannot create /users/alice.
     * @deny (get) - User 'bob' (auth.uid: 'bob') cannot get /users/alice.
     * @deny (update) - User 'bob' (auth.uid: 'bob') cannot update /users/alice.
     * @deny (delete) - User 'bob' (auth.uid: 'bob') cannot delete /users/alice.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure leaderboard entries. Publicly readable, but only the user can modify their own entry.
     * @path /leaderboard/{userId}
     * @allow (create) - User 'bob' (auth.uid: 'bob') can create /leaderboard/bob.
     * @allow (get) - Any user can read any leaderboard entry.
     * @allow (list) - Any user can list leaderboard entries.
     * @allow (update) - User 'bob' (auth.uid: 'bob') can update /leaderboard/bob.
     * @allow (delete) - User 'bob' (auth.uid: 'bob') can delete /leaderboard/bob.
     * @deny (create) - User 'bob' (auth.uid: 'bob') cannot create /leaderboard/alice.
     * @deny (update) - User 'bob' (auth.uid: 'bob') cannot update /leaderboard/alice.
     * @deny (delete) - User 'bob' (auth.uid: 'bob') cannot delete /leaderboard/alice.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /leaderboard/{userId} {
      allow get, list: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure duel game sessions. Players can create, join, and update their own games.
     * @path /duels/{duelId}
     * @allow (create) - User 'bob' (auth.uid: 'bob') can create a new duel. The hostId must be 'bob'.
     * @allow (get) - Any signed-in user can read a duel.
     * @allow (list) - Any signed-in user can list duels.
     * @allow (update) - The host user can update the duel, or any player can join.
     * @allow (delete) - The host user can delete the duel.
     * @deny (create) - User 'bob' cannot create a duel with hostId 'alice'.
     * @deny (update) - User 'alice' cannot update a duel hosted by 'bob', unless joining the game as a player.
     * @principle Allows public reads, enforces host ownership for writes, and allows players to join.
     */
    match /duels/{duelId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.hostId == request.auth.uid;
      allow update: if isSignedIn() && (resource.data.hostId == request.auth.uid || (exists(/databases/$(database)/documents/duels/$(duelId)) && resource.data.players.hasAny([request.auth.uid])));
      allow delete: if isSignedIn() && resource.data.hostId == resource.data.hostId;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId);
  }

  // function canJoinDuel(duelId) {
  //   return isSignedIn() && resource != null;
  //   // ADDED:  Allow any signed in user to modify the "players" field in the duel document.
  // }
}