/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and leaderboard entries.
 *   Duel game access is based on membership within the game document. Recent scores are publicly readable.
 *
 * @dataStructure
 * - /users/{userId}: User profile information, writeable only by the user.
 * - /leaderboard/{userId}: Leaderboard entries, writeable only by the user.
 * - /recentScores/{scoreId}: Recent scores, publicly readable and writeable by any signed-in user.
 * - /duels/{duelId}: Duel game sessions, access controlled by player membership.
 *
 * @keySecurityDecisions
 * - Users can only read and write their own profile and leaderboard data.
 * - Recent scores are publicly readable to facilitate the "Recent Scores" feed.
 * - Duel games enforce access based on player membership.
 * - Data shape validation is minimized for prototyping speed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile document at /users/user123.
     * @deny (create) User with UID 'user456' cannot create a profile document at /users/user123.
     * @allow (get) Any user can read a profile.
     * @allow (update) User with UID 'user123' can update their profile document at /users/user123.
     * @deny (update) User with UID 'user456' cannot update the profile document at /users/user123.
     * @allow (delete) User with UID 'user123' can delete their profile document at /users/user123.
     * @deny (delete) User with UID 'user456' cannot delete the profile document at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to leaderboard entries.
     * @path /leaderboard/{userId}
     * @allow (create) User with UID 'user123' can create their leaderboard entry at /leaderboard/user123.
     * @deny (create) User with UID 'user456' cannot create a leaderboard entry at /leaderboard/user123.
     * @allow (get) Any user can read a leaderboard entry.
     * @allow (list) Any user can list leaderboard entries.
     * @allow (update) User with UID 'user123' can update their leaderboard entry at /leaderboard/user123.
     * @deny (update) User with UID 'user456' cannot update the leaderboard entry at /leaderboard/user123.
     * @allow (delete) User with UID 'user123' can delete their leaderboard entry at /leaderboard/user123.
     * @deny (delete) User with UID 'user456' cannot delete the leaderboard entry at /leaderboard/user123.
     * @principle Enforces document ownership for writes. Allows public read access.
     */
    match /leaderboard/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to recent score entries.
     * @path /recentScores/{scoreId}
     * @allow (create) Any authenticated user can create a recent score entry.
     * @allow (get) Any user can read a recent score entry.
     * @allow (list) Any user can list recent score entries.
     * @deny (update) No user can update a recent score entry.
     * @deny (delete) No user can delete a recent score entry.
     * @principle Allows public read access and authenticated writes. No updates or deletes allowed.
     */
    match /recentScores/{scoreId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to duel game documents.
     * @path /duels/{duelId}
     * @allow (create) Any authenticated user can create a duel game.
     * @allow (get) Any user can read a duel game document.
     * @allow (list) Any user can list duel game documents.
     * @allow (update) Only players in the duel can update the game document.
     * @allow (delete) Only the host of the duel can delete the game document.
     * @principle Enforces shared access based on player membership in the duel.
     */
    match /duels/{duelId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isPlayer(request.auth.uid, resource.data.players);
      allow delete: if isSignedIn() && isHost(request.auth.uid, resource.data.hostId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isPlayer(uid, players) {
    return uid in players;
  }

  function isHost(uid, hostId) {
    return uid == hostId;
  }
}