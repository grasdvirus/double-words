/**
 * @description This ruleset enforces a user-ownership model for user profiles and leaderboard entries,
 *              allows any authenticated user to create a recent score entry, and implements shared access
 *              for duel game sessions.
 * @dataStructure
 *   - /users/{userId}: Stores public user profile information, accessible only to the user themselves.
 *   - /leaderboard/{userId}: Stores leaderboard entries, publicly readable but writable only by the corresponding user.
 *   - /recentScores/{scoreId}: Stores recent score entries, creatable by any authenticated user.
 *   - /duels/{duelId}: Stores duel game sessions, with access controlled by game membership.
 * @keySecurityDecisions
 *   - User profiles and leaderboard entries are strictly user-owned, preventing unauthorized modifications.
 *   - Leaderboard is publicly readable, facilitating easy access to ranking information.
 *   - Creation of user profiles is limited to authenticated users.
 *   - Access to duels is determined by membership, enabling collaborative gameplay.
 * @denormalizationForAuthorization
 *   - The `leaderboard/{userId}` document ID is used as the ownership field. This ensures that a user can only update their own entry.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) A user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) A user can read, update, and delete their own profile.
     * @deny (create) A user cannot create a profile for another user.
     * @deny (get, update, delete) A user cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to leaderboard entries.
     * @path /leaderboard/{userId}
     * @allow (get, list) Any user can read the leaderboard entries.
     * @allow (create, update, delete) A user can only create, update, or delete their own leaderboard entry.
     * @deny (create, update, delete) A user cannot modify another user's leaderboard entry.
     * @principle Enforces document ownership for leaderboard entries while allowing public read access.
     */
    match /leaderboard/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to recent score entries.
     * @path /recentScores/{scoreId}
     * @allow (create) Any authenticated user can create a recent score entry.
     * @deny (get, list, update, delete) No user can list, get, update, or delete recent score entries.
     * @principle Allows any signed-in user to create a recent score entry.
     */
    match /recentScores/{scoreId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to duel game sessions.
     * @path /duels/{duelId}
     * @allow (create) Any authenticated user can create a duel.
     * @allow (get, list, update) Users in the duel can read and update it.
     * @deny (get, list, update) Users not in the duel cannot read or update it.
     * @allow (delete) Only the host can delete a duel.
     * @principle Implements shared access based on duel membership.
     */
    match /duels/{duelId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant() {
          return request.auth.uid in resource.data.playerScores;
      }

       function isHost(hostId) {
        return request.auth.uid == hostId;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isParticipant() && resource.data != null;
      allow delete: if resource.data != null && isHost(resource.data.hostId);
    }
  }
}