/**
 * @file Overview
 * This ruleset enforces a user-ownership model for user profiles and leaderboard entries,
 * allowing users to only manage their own data. Recent scores are publicly readable and any
 * authenticated user can create them. Duels have access controlled by the members of the duel.
 *
 * Data Structure:
 * - /users/{userId}: Stores public profile information.
 * - /leaderboard/{userId}: Stores leaderboard entries.
 * - /recentScores/{scoreId}: Stores recent score entries.
 * - /duels/{duelId}: Stores duel game sessions.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Recent scores are publicly readable but create-only for authenticated users.
 * - All write operations require authentication.
 *
 * Denormalization for Authorization:
 *  - The `recentScores` collection depends on the client setting the `uid` field correctly.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile document at /users/user123.
     * @allow (update) User with UID 'user123' can update their profile document at /users/user123.
     * @allow (delete) User with UID 'user123' can delete their profile document at /users/user123.
     * @deny (create) User with UID 'user456' cannot create a profile document at /users/user123.
     * @deny (update) User with UID 'user456' cannot update the profile document at /users/user123.
     * @deny (delete) User with UID 'user456' cannot delete the profile document at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Verified authentication
      function isSignedIn() {
        return request.auth != null;
      }

      // Verified ownership
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper Function: Check existing ownership.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to leaderboard entries.
     * @path /leaderboard/{userId}
     * @allow (create) User with UID 'user123' can create their leaderboard entry at /leaderboard/user123.
     * @allow (update) User with UID 'user123' can update their leaderboard entry at /leaderboard/user123.
     * @allow (delete) User with UID 'user123' can delete their leaderboard entry at /leaderboard/user123.
     * @deny (create) User with UID 'user456' cannot create a leaderboard entry at /leaderboard/user123.
     * @deny (update) User with UID 'user456' cannot update the leaderboard entry at /leaderboard/user123.
     * @deny (delete) User with UID 'user456' cannot delete the leaderboard entry at /leaderboard/user123.
     * @principle Enforces document ownership for writes.
     */
    match /leaderboard/{userId} {
      // Verified authentication
      function isSignedIn() {
        return request.auth != null;
      }

      // Verified ownership
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper Function: Check existing ownership.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if true;
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to recent score entries.
     * @path /recentScores/{scoreId}
     * @allow (get) Any user can read recent score entries.
     * @allow (list) Any user can list recent score entries.
     * @allow (create) Any authenticated user can create a recent score entry.
     * @deny (update) No one can update recent score entries.
     * @deny (delete) No one can delete recent score entries.
     * @principle Public read, authenticated create.
     */
    match /recentScores/{scoreId} {
      // Verified authentication
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to duel game sessions.
     * @path /duels/{duelId}
     * @allow (create) Any authenticated user can create a duel game session.
     * @allow (update) Only players in the duel can update the game session.
     * @allow (get) Any authenticated user can get duel game session.
     * @deny (delete) No one can delete duel game sessions.
     * @principle Shared access for duel participants.
     */
    match /duels/{duelId} {
      // Verified authentication
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the user is a player in the duel
      function isPlayer(duelId) {
        return request.auth.uid in get(/databases/$(database)/documents/duels/$(duelId)).data.players;
      }

      function isExistingPlayer(duelId) {
        return isPlayer(duelId) && resource.data != null;
      }
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if isSignedIn();
      allow update: if isSignedIn() && isExistingPlayer(duelId);
      allow delete: if false;
    }
  }
}