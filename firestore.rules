/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure authorization while relaxing data validation to
 * enable rapid prototyping. It enforces a strict user-ownership model for
 * user-specific data and allows public read access to leaderboard data. Write
 * access is always protected by authentication and authorization checks. Data
 * validation is minimized to allow for flexible data shapes during prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information.
 * - /leaderboard/{userId}: Stores leaderboard entries (publicly readable).
 * - /duels/{duelId}: Stores real-time duel game sessions.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Leaderboard data is publicly readable but only writable by the corresponding user.
 * - Duel games can be created, joined, and updated by players.
 *
 * Denormalization for Authorization:
 * The `DuelGame` entity includes `hostId` to simplify ownership checks for game management.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (update) User with UID 'user123' can update their own profile.
     * @allow (get) User with UID 'user123' can get their own profile.
     * @allow (list) User with UID 'user123' can list their own profile.
     * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to leaderboard data, but restricts writes to the corresponding user.
     * @path /leaderboard/{userId}
     * @allow (get) Any user can read leaderboard data.
     * @allow (list) Any user can list leaderboard data.
     * @allow (create) User with UID 'user123' can create their own leaderboard entry.
     * @allow (update) User with UID 'user123' can update their own leaderboard entry.
     * @deny (create) User with UID 'user456' cannot create a leaderboard entry for 'user123'.
     * @deny (update) User with UID 'user456' cannot update the leaderboard entry for 'user123'.
     * @principle Allows public reads with owner-only writes.
     */
    match /leaderboard/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows players to create, join, and update their own duel games.
     * @path /duels/{duelId}
     * @allow (create) Any authenticated user can create a duel game.
     * @allow (update) The host of the game can update the game.
     * @allow (get) Any authenticated user can read duel game data.
     * @allow (list) Any authenticated user can list duel game data.
     * @deny (update) A non-host user cannot update a duel game.
     * @principle Enforces ownership for duel game management.
     */
    match /duels/{duelId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isHost(hostId) {
          return isSignedIn() && request.auth.uid == hostId;
        }

        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isHost(resource.data.hostId) && resource != null;
        allow delete: if false;
    }
  }
}